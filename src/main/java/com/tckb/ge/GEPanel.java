/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tckb.ge;

import com.tckb.ge.stubs.IApplicationGE;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.jawin.COMException;
import org.jawin.FuncPtr;
import org.jawin.ReturnFlags;
import org.jawin.donated.win32.RECT;
import org.jawin.donated.win32.User32;
import org.jawin.io.LittleEndianOutputStream;
import org.jawin.io.NakedByteStream;
import sun.awt.windows.WToolkit;

public class GEPanel extends JPanel implements Serializable {

    private IApplicationGE ge;

    public GEPanel() {
        initComponents();
    }

    /**
     * Get the com interface to GE on the native side
     *
     * @return
     */
    public IApplicationGE getInternObject() {
        return ge;
    }

    /**
     * Load kml as long string
     *
     * @param kmlData
     * @throws COMException
     */
    public void loadKMLString(String kmlData) throws COMException {
        Logger.getAnonymousLogger().info("Loading KML data to GE");
        this.ge.LoadKmlData(kmlData);

    }

    /**
     * Load kml file
     *
     * @param kmlFile
     * @throws COMException
     */
    public void loadKMLFile(String kmlFile) throws COMException {
        Logger.getAnonymousLogger().log(Level.INFO, "Loading KML file:  {0}", kmlFile);
        this.ge.OpenKmlFile(kmlFile, 0);

    }

    /**
     * Load kml file
     *
     * @param file
     * @throws COMException
     */
    public void loadKmlFile(File file) throws COMException {
        Logger.getAnonymousLogger().log(Level.INFO, "Loading KML file:  {0}", file.getName());
        this.loadKMLFile(file.getAbsolutePath());
    }

    /**
     * Initiate GE, calling this method would start GE on the native side
     *
     * @throws COMException
     * @throws InterruptedException
     * @throws IOException
     */
    public void initGE() throws COMException, InterruptedException, IOException {
        //Start Google Earth
        ge = new IApplicationGE("GoogleEarth.ApplicationGE");
        this.setGEWinVisibility(false);
        Logger.getAnonymousLogger().info("Initializing Google Earth... ");
        while (ge.IsInitialized() <= 0) {
            System.out.print(">");
            Thread.sleep(350);
        }
        Logger.getAnonymousLogger().info("Done.");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the visibility of GE on the native side
     *
     * @param flag
     * @throws COMException
     * @throws IOException
     */
    public void setGEWinVisibility(boolean flag) throws COMException, IOException {
        Logger.getAnonymousLogger().log(Level.INFO, "Setting the visibility of GE Main window {0}", flag);
        User32.ShowWindow(getGEMainHandle(), flag ? 3 : 0);
    }

    /**
     * Get the native handle of the Main window of GE
     *
     * @return
     * @throws COMException
     */
    public int getGEMainHandle() throws COMException {
        Logger.getAnonymousLogger().info("Retrieving GE Main window handle");
        return (Integer) this.ge.GetMainHwnd();
    }

    /**
     * Get the native handle of the rendering ( the giant globe ) window of GE
     *
     * @return
     * @throws COMException
     */
    public int getGERenderHandle() throws COMException {
        Logger.getAnonymousLogger().info("Retrieving GE rendering window handle");
        return (Integer) ge.GetRenderHwnd();
    }

    /**
     * Get native handle for the Java container that "holds" this panel
     *
     * @return
     * @throws NoSuchFieldException
     * @throws IllegalArgumentException
     * @throws IllegalAccessException
     */
    private int getParentHandle() throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        Logger.getAnonymousLogger().info("Retrieving GE Main window handle");
        Object nativePeer = WToolkit.targetToPeer(SwingUtilities.getWindowAncestor(this));
        Class nativeClass = nativePeer.getClass();
        Logger.getAnonymousLogger().log(Level.INFO, "Native peer class for parent: {0}", nativeClass.getCanonicalName());
        Field f = getDeclaredField(nativeClass, "hwnd");
        f.setAccessible(true);
        return ((Long) f.get(nativePeer)).intValue();
    }

    /**
     * Embed the native rendering window to the java container
     *
     * @throws COMException
     * @throws InterruptedException
     * @throws IOException
     * @throws NoSuchFieldException
     * @throws IllegalArgumentException
     * @throws IllegalAccessException
     */
    public void embedGE() throws COMException, InterruptedException, IOException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        if (this.isVisible()) {
            // turn off the visiblity of the native side GE
            this.setGEWinVisibility(false);
            // this is where the magic happens!
            this.swapHandles(getGERenderHandle(), getParentHandle());
            // this.resizeGERenderHwnd();
        }
    }

    /**
     * Swap the native handles from src to dest
     *
     * @param srcHandle
     * @param dstHandle
     * @throws COMException
     */
    private void swapHandles(int srcHandle, int dstHandle) throws COMException {
        Logger.getAnonymousLogger().log(Level.INFO, "Swapping handle from {0} to {1}", new Object[]{srcHandle, dstHandle});
        FuncPtr setParent = new FuncPtr("USER32.DLL", "SetParent");
        setParent.invoke_I(srcHandle, dstHandle, ReturnFlags.CHECK_FALSE);
    }

    /**
     * Get the dimension of the native rendering window
     *
     * @return
     * @throws org.jawin.COMException
     * @throws java.io.IOException
     */
    public Dimension getGERenderDimension() throws COMException, IOException {
        Logger.getAnonymousLogger().info("Retrieving GE rendering window dimension");
        RECT dim = new RECT();
        User32.GetClientRect(getGERenderHandle(), dim);
        return new Dimension(dim.right + 10, dim.bottom + 10);
    }

    // Borrowed methods
    /**
     * Recursively find the field name in the given class
     *
     *
     * @param cls
     * @param fieldName
     * @return
     * @throws NoSuchFieldException
     */
    private Field getDeclaredField(Class cls, String fieldName) throws NoSuchFieldException {
        Class c = cls;
        while (c != null && c != Object.class) {
            try {
                return c.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
            }
            c = c.getSuperclass();
        }
        throw new NoSuchFieldException(fieldName);
    }

    /**
     * Terminate GE from the native side
     */
    public void quitGE() throws COMException, IOException {
        Logger.getAnonymousLogger().info("Terminating GE from native side");
        FuncPtr endTask = new FuncPtr("USER32.DLL", "EndTask");
        //create a NakedByteStream for the serialization of Java variables
        NakedByteStream nbs = new NakedByteStream();
        // wrap it in a LittleEndianOutputStream
        LittleEndianOutputStream leos = new LittleEndianOutputStream(nbs);
        // and then write the Java arguments
        leos.writeInt(getGERenderHandle());      //Handle to the window to be closed.
        leos.writeInt(0);                       // Ignored. Must be FALSE.
        leos.writeInt(1);
        /* TRUE for this parameter will force the destruction of the window if an  
         { initial } attempt fails to gently close the window using 
         WM_CLOSE.With a FALSE for this parameter , only  { the 
         } close with WM_CLOSE is attempted. */
        endTask.invoke("III:I:", 12, nbs, null, ReturnFlags.CHECK_FALSE);

    }

}
